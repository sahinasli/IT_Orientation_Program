{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cQOgT4VzGZo5"
      },
      "source": [
        "<p>Given the code below, use the correct function on line 3 in order to convert <strong>num1 </strong>from integer to float.</p>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6SJIjhNNGZo9"
      },
      "outputs": [],
      "source": [
        "num1 = 25\n",
        "\n",
        "num2 =\n",
        "\n",
        "print(type(num2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X_4U9eYVGZo_"
      },
      "source": [
        "<p>Given the code below, use the correct function on line 3 in order to convert <strong>num1 </strong>from float to integer.</p>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KWVJbzFGGZo_"
      },
      "outputs": [],
      "source": [
        "num1 = 13.67\n",
        "\n",
        "num2 =\n",
        "\n",
        "print(type(num2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ru0DXaWPGZpA"
      },
      "source": [
        "<p>Given the code below, use the correct math operator in between <strong>num1 </strong>and <strong>num2 </strong>on line 4 in order to obtain the result shown.</p>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "V2ZDGhh5GZpA"
      },
      "outputs": [],
      "source": [
        "num1 = 25\n",
        "num2 = 8\n",
        "\n",
        "num3 = num1 num2\n",
        "\n",
        "print(num3 == 1) #result is True"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N4jL7jK7GZpA"
      },
      "source": [
        "<p>Given the code below, use the correct math operator in between <strong>num1 </strong>and <strong>num2 </strong>on line 4 in order to obtain the result shown.</p>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AxUQWWEhGZpB"
      },
      "outputs": [],
      "source": [
        "num1 = 10\n",
        "num2 = 3\n",
        "\n",
        "num3 = num1 num2\n",
        "\n",
        "print(num3 == 250 * 4) #result is True"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tSiYllIkGZpB"
      },
      "source": [
        "<p>Given the code below, use the correct math operator in between <strong>num1 </strong>and <strong>num2 </strong>on line 4 in order to obtain the result shown.</p>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3rmP2vURGZpC"
      },
      "outputs": [],
      "source": [
        "num1 = 5\n",
        "num2 = 2\n",
        "\n",
        "num3 = num1 num2\n",
        "\n",
        "print(num3 == 5 % 3) #result is True"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nTwOtQQdGZpC"
      },
      "source": [
        "<p>Given the code below, use the correct function<strong> </strong>on line 3 in order to obtain the distance between <strong>num1 </strong>and 0.</p>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9O7EkLGfGZpC"
      },
      "outputs": [],
      "source": [
        "num1 = -11\n",
        "\n",
        "num2 =\n",
        "\n",
        "print(num2 == 11) #should result True"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9iV9Oqe1GZpD"
      },
      "source": [
        "<p>Given the code below, use the correct function<strong> </strong>on line 4 in order to raise <strong>num1 </strong>to the power of <strong>num2</strong>.</p>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1XajnQybGZpD"
      },
      "outputs": [],
      "source": [
        "num1 = 10\n",
        "num2 = 5\n",
        "\n",
        "num3 =\n",
        "\n",
        "print(num3 == 100000)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oOmdkbdDGZpD"
      },
      "source": [
        "<p>Given the code below, use the correct logical operator in between the two expressions<strong> </strong>on line 1 in order for the final result to be <strong>False</strong>.</p>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rrqzXkH5GZpD"
      },
      "outputs": [],
      "source": [
        "result = ((25 % 7 + 10 / 2) % 3 == 0)  ((abs(-19) / 2 - 2) > 9)\n",
        "\n",
        "print(result) #should return False"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nww2wptQGZpD"
      },
      "source": [
        "<p>Given the code below, use the correct logical operator in between the two expressions<strong> </strong>on line 1 in order for the final result to be <strong>True</strong>.</p>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "c7kAI82EGZpD"
      },
      "outputs": [],
      "source": [
        "result = (min(pow(2, abs(3)), 9) == 3 ** 2 - 1)  (66 % 20 + 2 > 2 ** 3)\n",
        "\n",
        "print(result) #should return True"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wa_2lAgqGZpE"
      },
      "source": [
        "<p>Given the code below, use the correct function on line 1 (for which the argument sits inside the parentheses) in order for the final result to be <strong>False</strong>.</p>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Nj4gbTBzGZpE"
      },
      "outputs": [],
      "source": [
        "result = (150 % (10 ** 2 / 2))\n",
        "\n",
        "print(result) #should return False"
      ]
    }
  ],
  "metadata": {
    "interpreter": {
      "hash": "468f25ad0239460415b7e6b7483d5c8f7213894121f6fb96c4cb6ef93fffe534"
    },
    "kernelspec": {
      "display_name": "Python 3.9.6 64-bit",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.6"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}